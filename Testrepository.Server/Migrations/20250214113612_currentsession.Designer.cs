// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Testrepository.Server.Persistence.Internal.GeneratedArtifacts;

#nullable disable

namespace Testrepository.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250214113612_currentsession")]
    partial class currentsession
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Testrepository.Server.Models.Entities.ChatMessageEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("sender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sender");

                    b.Property<int>("session_id")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("chat_messages_pkey");

                    b.HasIndex("session_id");

                    b.ToTable("chat_messages", "testschema");
                });

            modelBuilder.Entity("Testrepository.Server.Models.Entities.SessionEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("id")
                        .HasName("sessions_pkey");

                    b.HasIndex("user_id");

                    b.ToTable("sessions", "testschema");
                });

            modelBuilder.Entity("Testrepository.Server.Models.Entities.UserEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("CurrentSessionid")
                        .HasColumnType("integer");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("id")
                        .HasName("users_pkey");

                    b.HasIndex("CurrentSessionid");

                    b.ToTable("users", "testschema");
                });

            modelBuilder.Entity("Testrepository.Server.Models.Entities.ChatMessageEntity", b =>
                {
                    b.HasOne("Testrepository.Server.Models.Entities.SessionEntity", "session")
                        .WithMany("Messages")
                        .HasForeignKey("session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_messages_sessions");

                    b.Navigation("session");
                });

            modelBuilder.Entity("Testrepository.Server.Models.Entities.SessionEntity", b =>
                {
                    b.HasOne("Testrepository.Server.Models.Entities.UserEntity", "UserEntity")
                        .WithMany("sessions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("Testrepository.Server.Models.Entities.UserEntity", b =>
                {
                    b.HasOne("Testrepository.Server.Models.Entities.SessionEntity", "CurrentSession")
                        .WithMany()
                        .HasForeignKey("CurrentSessionid");

                    b.Navigation("CurrentSession");
                });

            modelBuilder.Entity("Testrepository.Server.Models.Entities.SessionEntity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Testrepository.Server.Models.Entities.UserEntity", b =>
                {
                    b.Navigation("sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
